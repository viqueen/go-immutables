package builders

import (
	"go/ast"
	"log"
	"os"
	"strings"
	"text/template"

	ast_helpers "github.com/viqueen/go-immutables/internal/ast-helpers"
)

var standardBuilderTemplate = `
// generated by go-immutables

package {{.PackageName}}

type {{.Name.Upper}}Builder interface {
	Build() {{.Name.Upper}}
{{range .Fields}}
	Set{{.Name.Upper}}(value {{.Type}}) {{$.Name.Upper}}Builder
{{end}}
}

type {{.Name.Lower}}Builder struct {
	target {{.Name.Upper}}
}

func New{{.Name.Upper}}Builder() {{.Name.Upper}}Builder {
	return &{{.Name.Lower}}Builder{
		target: {{.Name.Upper}}{},
	}
}
{{range .Fields}}
func (b *{{$.Name.Lower}}Builder) Set{{.Name.Upper}}(value {{.Type}}) {{$.Name.Upper}}Builder {
	b.target.{{.Name.Lower}} = value
	return b
}
{{end}}
func (b *{{.Name.Lower}}Builder) Build() {{.Name.Upper}} {
	return b.target
}
`

func GenerateStandardStructBuilder(packageName string, typeSpec *ast.TypeSpec) string {
	structDetails := ast_helpers.ExtractDetails(packageName, typeSpec)

	if (len(structDetails.Fields)) == 0 {
		return ""
	}

	parsed, err := template.New("builder").Parse(strings.Trim(standardBuilderTemplate, "\n"))
	if err != nil {
		log.Fatalf("could not parse standard builder template: %v", err)
	}

	base := structDetails.Name.Lower
	fileName := base + "_standard_builder.go"
	file, err := os.Create(fileName)
	if err != nil {
		log.Fatalf("could not create standard builder file: %v", err)
	}
	defer file.Close()

	err = parsed.Execute(file, structDetails)
	if err != nil {
		log.Fatalf("could not execute standard builder template: %v", err)
	}

	return fileName
}
